/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as PrismaClient from ".prisma/client"
import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  LoginInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  RegisterInput: { // input type
    email: string; // String!
    name: string; // String!
    password: string; // String!
  }
}

export interface NexusGenEnums {
  AttributeTypeEnum: PrismaClient.AttributeTypeEnum
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
}

export interface NexusGenRootTypes {
  AttributeType: PrismaClient.AttributeType;
  AuthenticationPayload: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Category: PrismaClient.Category;
  Item: PrismaClient.Item;
  Mutation: {};
  Outgoing: PrismaClient.Outgoing;
  Position2D: { // root type
    x?: number | null; // Int
    y?: number | null; // Int
  }
  Position3D: { // root type
    x?: number | null; // Int
    y?: number | null; // Int
    z?: number | null; // Int
  }
  Query: {};
  Size: { // root type
    x?: number | null; // Int
    y?: number | null; // Int
    z?: number | null; // Int
  }
  Storage: PrismaClient.Storage;
  User: PrismaClient.User;
  Warehouse: PrismaClient.Warehouse;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  LoginInput: NexusGenInputs['LoginInput'];
  RegisterInput: NexusGenInputs['RegisterInput'];
  AttributeTypeEnum: NexusGenEnums['AttributeTypeEnum'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  Date: NexusGenScalars['Date'];
}

export interface NexusGenFieldTypes {
  AttributeType: { // field return type
    color: string | null; // String
    createdAt: NexusGenScalars['Date'] | null; // Date
    id: string | null; // ID
    type: NexusGenEnums['AttributeTypeEnum'] | null; // AttributeTypeEnum
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  AuthenticationPayload: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Category: { // field return type
    color: string | null; // String
    createdAt: NexusGenScalars['Date'] | null; // Date
    id: string | null; // ID
    name: string | null; // String
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  Item: { // field return type
    createdAt: NexusGenScalars['Date'] | null; // Date
    id: string | null; // ID
    image: string | null; // String
    name: string | null; // String
    position: NexusGenRootTypes['Position3D'] | null; // Position3D
    size: NexusGenRootTypes['Size'] | null; // Size
    updatedAt: NexusGenScalars['Date'] | null; // Date
    value: number | null; // Int
  }
  Mutation: { // field return type
    login: NexusGenRootTypes['AuthenticationPayload'] | null; // AuthenticationPayload
    register: NexusGenRootTypes['AuthenticationPayload'] | null; // AuthenticationPayload
  }
  Outgoing: { // field return type
    createdAt: NexusGenScalars['Date'] | null; // Date
    description: string | null; // String
    id: string | null; // ID
    updatedAt: NexusGenScalars['Date'] | null; // Date
    value: number | null; // Int
  }
  Position2D: { // field return type
    x: number | null; // Int
    y: number | null; // Int
  }
  Position3D: { // field return type
    x: number | null; // Int
    y: number | null; // Int
    z: number | null; // Int
  }
  Query: { // field return type
    me: NexusGenRootTypes['User'] | null; // User
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Size: { // field return type
    x: number | null; // Int
    y: number | null; // Int
    z: number | null; // Int
  }
  Storage: { // field return type
    createdAt: NexusGenScalars['Date'] | null; // Date
    id: string | null; // ID
    name: string | null; // String
    position: NexusGenRootTypes['Position2D'] | null; // Position2D
    size: NexusGenRootTypes['Size'] | null; // Size
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  User: { // field return type
    email: string | null; // String
    id: string | null; // ID
    name: string | null; // String
    password: string | null; // String
  }
  Warehouse: { // field return type
    createdAt: NexusGenScalars['Date'] | null; // Date
    id: string | null; // ID
    name: string | null; // String
    size: NexusGenRootTypes['Size'] | null; // Size
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
}

export interface NexusGenFieldTypeNames {
  AttributeType: { // field return type name
    color: 'String'
    createdAt: 'Date'
    id: 'ID'
    type: 'AttributeTypeEnum'
    updatedAt: 'Date'
  }
  AuthenticationPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Category: { // field return type name
    color: 'String'
    createdAt: 'Date'
    id: 'ID'
    name: 'String'
    updatedAt: 'Date'
  }
  Item: { // field return type name
    createdAt: 'Date'
    id: 'ID'
    image: 'String'
    name: 'String'
    position: 'Position3D'
    size: 'Size'
    updatedAt: 'Date'
    value: 'Int'
  }
  Mutation: { // field return type name
    login: 'AuthenticationPayload'
    register: 'AuthenticationPayload'
  }
  Outgoing: { // field return type name
    createdAt: 'Date'
    description: 'String'
    id: 'ID'
    updatedAt: 'Date'
    value: 'Int'
  }
  Position2D: { // field return type name
    x: 'Int'
    y: 'Int'
  }
  Position3D: { // field return type name
    x: 'Int'
    y: 'Int'
    z: 'Int'
  }
  Query: { // field return type name
    me: 'User'
    users: 'User'
  }
  Size: { // field return type name
    x: 'Int'
    y: 'Int'
    z: 'Int'
  }
  Storage: { // field return type name
    createdAt: 'Date'
    id: 'ID'
    name: 'String'
    position: 'Position2D'
    size: 'Size'
    updatedAt: 'Date'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
    password: 'String'
  }
  Warehouse: { // field return type name
    createdAt: 'Date'
    id: 'ID'
    name: 'String'
    size: 'Size'
    updatedAt: 'Date'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    login: { // args
      data: NexusGenInputs['LoginInput']; // LoginInput!
    }
    register: { // args
      data: NexusGenInputs['RegisterInput']; // RegisterInput!
    }
  }
  Query: {
    users: { // args
      world?: string | null; // String
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AttributeType" | "AuthenticationPayload" | "Category" | "Item" | "Mutation" | "Outgoing" | "Position2D" | "Position3D" | "Query" | "Size" | "Storage" | "User" | "Warehouse";

export type NexusGenInputNames = "LoginInput" | "RegisterInput";

export type NexusGenEnumNames = "AttributeTypeEnum";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Date" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: { prisma: PrismaClient.PrismaClient };
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}