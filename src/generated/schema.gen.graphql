### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Attribute {
  id: ID
  item: [Item]!
  type: AttributeTypeEnum
  value: String
}

type AttributeType {
  category: [Category]!
  id: ID
  name: String
  type: AttributeTypeEnum
}

enum AttributeTypeEnum {
  DATE
  DATETIME
  NUMBER
  STRING
}

type AuthenticationPayload {
  token: String
  user: User
}

type Category {
  children: [Category!]
  color: String
  id: ID
  items: [Item!]
  name: String
  parent: [Category]
}

"""Input of pasword changing"""
input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ConnectOrDisconnectRelation {
  connect: ConnectRelation
  disconnect: ConnectRelation
}

"""Connect a related entity"""
input ConnectRelation {
  id: Int!
}

"""Input of create item"""
input CreateItemInput {
  image: String!
  name: String!
  positionX: Int
  positionY: Int
  positionZ: Int
  sizeX: Int!
  sizeY: Int!
  sizeZ: Int!
  storage: ConnectRelation!
  value: Int!
}

"""Input of create storage"""
input CreateStorageInput {
  name: String!
  positionX: Int!
  positionY: Int!
  positionZ: Int!
  sizeX: Int!
  sizeY: Int!
  sizeZ: Int!
  warehouse: ConnectRelation!
}

"""Input of create warehouse"""
input CreateWarehouseInput {
  name: String!
  sizeX: Int!
  sizeY: Int!
  sizeZ: Int!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""Input of forgot password"""
input ForgotPasswordInput {
  email: String!
}

type Item {
  attributes: [Attribute!]
  categories: [Category!]
  id: ID
  image: String
  name: String
  outgoings: [Outgoing!]
  position: Position3D
  size: Size
  storage: [Storage]!
  value: Int
}

"""Input of login"""
input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  changePassword(data: ChangePasswordInput!): User
  createItem(data: CreateItemInput!): Item
  createStorage(data: CreateStorageInput!): Storage
  createWarehouse(data: CreateWarehouseInput!): Warehouse
  deleteItem(id: Int!): Item
  deleteStorage(id: Int!): Storage
  deleteWarehouse(id: Int!): Warehouse
  forgotPassword(data: ForgotPasswordInput!): Boolean
  login(data: LoginInput!): AuthenticationPayload
  register(data: RegisterInput!): AuthenticationPayload
  resetPassword(data: ResetPasswordInput!): Boolean
  updateItem(data: UpdateItemInput!, id: Int!): Item
  updateStorage(data: UpdateStorageInput!, id: Int!): Storage
  updateWarehouse(data: UpdateWarehouseInput!, id: Int!): Warehouse
}

type Outgoing {
  description: String
  id: ID
  item: [Item]!
  value: Int
}

"""Position in 2 dimension"""
type Position2D {
  x: Int
  y: Int
}

"""Position in 3 dimension"""
type Position3D {
  x: Int
  y: Int
  z: Int
}

type Query {
  item(id: Int!): Item
  me: User
  storage(id: Int!): Storage
  users(world: String): [User]
  warehouse(id: Int!): Warehouse
  warehouses: [Warehouse]
}

"""Input of register"""
input RegisterInput {
  email: String!
  name: String!
  password: String!
}

"""Input of password reset"""
input ResetPasswordInput {
  password: String!
  token: String!
}

type ResetPasswordToken {
  email: ID
  token: String
}

type Role {
  id: ID
  roleType: RoleTypeEnum
  user: [User]!
  warehouse: [Warehouse]!
}

enum RoleTypeEnum {
  ADMIN
  EDITOR
  USER
}

"""Size of an entity"""
type Size {
  x: Int
  y: Int
  z: Int
}

type Storage {
  id: ID
  items: [Item!]
  name: String
  position: Position2D
  size: Size
  warehouse: [Warehouse!]!
}

type Subscription {
  itemCreated: Item
  itemDeleted: Item
  itemUpdated: Item
}

"""Input of update an item"""
input UpdateItemInput {
  image: String
  name: String
  positionX: Int
  positionY: Int
  positionZ: Int
  sizeX: Int
  sizeY: Int
  sizeZ: Int
  storage: ConnectOrDisconnectRelation
  value: Int
}

"""Input of update an storage"""
input UpdateStorageInput {
  name: String
  positionX: Int
  positionY: Int
  positionZ: Int
  sizeX: Int
  sizeY: Int
  sizeZ: Int
  warehouse: ConnectOrDisconnectRelation
}

"""Input of update an warehouse"""
input UpdateWarehouseInput {
  name: String
  sizeX: Int
  sizeY: Int
  sizeZ: Int
}

type User {
  email: String
  globalRole: RoleTypeEnum
  id: ID
  name: String
  password: String
  roles: [Role!]
  warehouses: [Warehouse!]
}

type Warehouse {
  id: ID
  name: String
  roles: [Role!]
  size: Size
  storages: [Storage!]
  users: [User!]
}
